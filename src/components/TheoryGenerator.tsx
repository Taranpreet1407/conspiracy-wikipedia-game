import React, { useState } from 'react';
import { Zap, Loader2, RefreshCw, Share2, Bookmark, AlertCircle } from 'lucide-react';
import { WikipediaService } from '../utils/wikipedia';
import { ConspiracyGenerator } from '../utils/templates';
import { ConspiracyTheory } from '../types';

const TheoryGenerator: React.FC = () => {
  const [theory, setTheory] = useState<ConspiracyTheory | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [savedTheories, setSavedTheories] = useState<ConspiracyTheory[]>([]);

  const wikipediaService = WikipediaService.getInstance();
  const conspiracyGenerator = new ConspiracyGenerator();

  const generateTheory = async () => {
    setIsGenerating(true);
    setError(null);
    
    try {
      // Fetch random Wikipedia articles
      const articles = await wikipediaService.getRandomArticles(3);
      
      // Generate conspiracy theory
      const newTheory = conspiracyGenerator.generateTheory(articles);
      
      setTheory(newTheory);
    } catch (err) {
      setError('Failed to generate theory. Please try again.');
      console.error('Theory generation error:', err);
    } finally {
      setIsGenerating(false);
    }
  };

  const saveTheory = () => {
    if (theory && !savedTheories.find(t => t.id === theory.id)) {
      setSavedTheories(prev => [theory, ...prev].slice(0, 5)); // Keep only last 5
    }
  };

  const shareTheory = async () => {
    if (!theory) return;
    
    const shareText = `üé≠ SATIRICAL CONSPIRACY THEORY (Educational Purpose Only)\n\n${theory.theory}\n\n‚ö†Ô∏è This is obviously fictional content created for teaching critical thinking!\n\nGenerated by: Conspiracy Theory Generator - Built by Anthahkarana`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Conspiracy Theory Generator - Educational Satire',
          text: shareText,
        });
      } catch (err) {
        // Fallback to clipboard
        navigator.clipboard.writeText(shareText);
      }
    } else {
      navigator.clipboard.writeText(shareText);
    }
  };

  const getBelievabilityColor = (score: number) => {
    if (score < 30) return 'text-green-400';
    if (score < 60) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getBelievabilityLabel = (score: number) => {
    if (score < 30) return 'Obviously Satirical';
    if (score < 60) return 'Moderately Absurd';
    return 'Needs More Absurdity';
  };

  return (
    <div className="w-full">
      {/* Generator Section */}
      <div className="terminal-window rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
        <div className="flex items-center gap-2 mb-4 text-cyan-400">
          <div className="w-2 h-2 sm:w-3 sm:h-3 rounded-full bg-red-500"></div>
          <div className="w-2 h-2 sm:w-3 sm:h-3 rounded-full bg-yellow-500"></div>
          <div className="w-2 h-2 sm:w-3 sm:h-3 rounded-full bg-green-500"></div>
          <span className="ml-2 text-xs sm:text-sm">conspiracy_theory_generator.exe</span>
        </div>
        
        <div className="text-center">
          <h2 className="text-xl sm:text-2xl font-bold text-cyan-400 mb-4">
            CLASSIFIED CONSPIRACY THEORY GENERATOR
          </h2>
          
          <p className="text-sm sm:text-base text-cyan-300 mb-6 max-w-2xl mx-auto px-2">
            Generate obviously fictional conspiracy theories by combining random Wikipedia articles. 
            Each theory is designed to be transparently satirical for educational purposes.
          </p>
          
          <button
            onClick={generateTheory}
            disabled={isGenerating}
            className="group relative inline-flex items-center gap-2 sm:gap-3 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 disabled:from-gray-600 disabled:to-gray-700 text-black font-bold py-3 sm:py-4 px-4 sm:px-8 rounded-lg transition-all duration-300 transform hover:scale-105 disabled:scale-100 disabled:cursor-not-allowed text-sm sm:text-base"
          >
            {isGenerating ? (
              <>
                <Loader2 className="w-5 h-5 sm:w-6 sm:h-6 animate-spin" />
                <span className="hidden sm:inline">GENERATING THEORY...</span>
                <span className="sm:hidden">GENERATING...</span>
              </>
            ) : (
              <>
                <Zap className="w-5 h-5 sm:w-6 sm:h-6 group-hover:animate-pulse" />
                <span className="hidden sm:inline">GENERATE CONSPIRACY THEORY</span>
                <span className="sm:hidden">GENERATE THEORY</span>
              </>
            )}
          </button>
          
          {error && (
            <div className="mt-4 p-3 sm:p-4 bg-red-900/30 border border-red-500/50 rounded-lg">
              <div className="flex items-center gap-2 text-red-400 text-sm">
                <AlertCircle className="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" />
                <span>{error}</span>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Theory Display */}
      {theory && (
        <div className="terminal-window rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 sm:mb-6 gap-4">
            <div className="flex flex-wrap items-center gap-2 sm:gap-4">
              <div className="classified-stamp text-xs px-2 py-1">
                SATIRICAL
              </div>
              <div className="text-xs text-cyan-400">
                Template: {theory.template}
              </div>
            </div>
            
            <div className="flex gap-2 w-full sm:w-auto">
              <button
                onClick={saveTheory}
                className="flex-1 sm:flex-none p-2 bg-blue-600 hover:bg-blue-500 rounded-lg transition-colors"
                title="Save Theory"
              >
                <Bookmark className="w-4 h-4 mx-auto" />
              </button>
              <button
                onClick={shareTheory}
                className="flex-1 sm:flex-none p-2 bg-green-600 hover:bg-green-500 rounded-lg transition-colors"
                title="Share Theory (with disclaimer)"
              >
                <Share2 className="w-4 h-4 mx-auto" />
              </button>
              <button
                onClick={generateTheory}
                className="flex-1 sm:flex-none p-2 bg-purple-600 hover:bg-purple-500 rounded-lg transition-colors"
                title="Generate New Theory"
              >
                <RefreshCw className="w-4 h-4 mx-auto" />
              </button>
            </div>
          </div>
          
          <div className="bg-black/50 p-4 sm:p-6 rounded-lg border border-cyan-500/30 mb-4 sm:mb-6">
            <h3 className="text-base sm:text-lg font-bold text-red-400 mb-3 sm:mb-4">
              ‚ö†Ô∏è OBVIOUSLY FICTIONAL CONSPIRACY THEORY ‚ö†Ô∏è
            </h3>
            
            <p className="text-cyan-100 leading-relaxed text-sm sm:text-lg font-mono break-words">
              {theory.theory}
            </p>
          </div>
          
          {/* Believability Meter */}
          <div className="mb-4 sm:mb-6">
            <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-2 gap-1">
              <span className="text-sm text-cyan-400">Satirical Absurdity Level</span>
              <span className={`text-sm font-bold ${getBelievabilityColor(theory.believabilityScore)}`}>
                {getBelievabilityLabel(theory.believabilityScore)} ({100 - theory.believabilityScore}%)
              </span>
            </div>
            <div className="bg-gray-700 rounded-full h-3 overflow-hidden">
              <div 
                className="believability-meter h-full transition-all duration-1000"
                style={{ width: `${100 - theory.believabilityScore}%` }}
              ></div>
            </div>
            <p className="text-xs text-gray-400 mt-1">
              Higher absurdity = more obviously satirical (which is good!)
            </p>
          </div>
          
          {/* Source Articles */}
          <div className="border-t border-cyan-500/30 pt-4">
            <h4 className="text-sm font-bold text-cyan-400 mb-3">
              Wikipedia Sources Used (Educational Transparency):
            </h4>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
              {theory.sources.map((source, index) => (
                <div key={index} className="bg-gray-800/50 p-3 rounded-lg border border-gray-600">
                  <h5 className="text-sm font-bold text-cyan-300 mb-1 break-words">
                    {source.title}
                  </h5>
                  <p className="text-xs text-gray-400 mb-2 line-clamp-2">
                    {source.extract}
                  </p>
                  {source.url && (
                    <a
                      href={source.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-xs text-blue-400 hover:text-blue-300 underline break-all"
                    >
                      View Original Article ‚Üí
                    </a>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Saved Theories */}
      {savedTheories.length > 0 && (
        <div className="terminal-window rounded-lg p-4 sm:p-6">
          <h3 className="text-base sm:text-lg font-bold text-cyan-400 mb-4">
            Recently Generated Theories
          </h3>
          <div className="space-y-3">
            {savedTheories.map((savedTheory) => (
              <div
                key={savedTheory.id}
                className="bg-gray-800/30 p-3 sm:p-4 rounded-lg border border-gray-600 cursor-pointer hover:border-cyan-500/50 transition-colors"
                onClick={() => setTheory(savedTheory)}
              >
                <p className="text-sm text-cyan-100 line-clamp-2 break-words">
                  {savedTheory.theory}
                </p>
                <div className="flex flex-col sm:flex-row sm:items-center justify-between mt-2 gap-1">
                  <span className="text-xs text-gray-400">
                    {savedTheory.template}
                  </span>
                  <span className="text-xs text-gray-400">
                    {savedTheory.timestamp.toLocaleTimeString()}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default TheoryGenerator;